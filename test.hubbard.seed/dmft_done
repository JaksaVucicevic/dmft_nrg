#!/usr/bin/env perl
# Script that runs after the iteration is finished
# Rok Zitko, 2008-2025

use warnings;
use Term::ANSIColor qw(:constants);

-e "res" or error("res/ does not exist, stopped");

# Clean up first
system "rm -f res/*";

# Average spectral functions
msg("average");
system "./average";

(-e "res/c-imF.dat" && -e "res/c-imG.dat")
or error("Spectral functions not found, stopped");

# Compute real parts
msg("realparts");
system "./realparts";

(-e "res/c-reF.dat" && -e "res/c-reG.dat")
or error("Real parts of Green's functions not found, stopped");

# Expectation values
system ("gatherlastlines custom");
system ("columnavg_comment custom >custom.avg");
system ("gatherlastlines customfdm");
system ("columnavg_comment customfdm >customfdm.avg");

# Compute self-energy
msg("sigmatrick");
system "./sigmatrick";

(-e "res/imsigma.dat" && -e "res/resigma.dat")
or error("Self-energy not found, stopped");

# Compute G_script
msg("bandDOS");
system "./bandDOS";

(-s "res/imaw.dat" && -s "res/reaw.dat")
or error("(Lattice) spectral functions not found, stopped");

# Increase iteration number (0 -> 1 initially); must be called before copyresults
msg("newiter");
system "newiter";

# Copy results of postprocessing
msg("copyresults");
system "./copyresults";

# Compute differences (for self-consistency condition checks)
msg("diffs");
system "./diffs";

# Compute occupancies (after copyresults!)
msg("occupancies");
if (-x "occupancies_calc") {
    system "./occupancies_calc";
} else {
    print "Occupancy control turned off.\n";
}

# Compute input for next NRG iteration
msg("Computing Delta.dat");
system "mv Delta.dat Delta.dat.OLD"; # save the old one!
system "scaley -1 ImDelta.dat >Delta.dat";

-e "Delta.dat" or error("Hybridisation function not found, stopped");

system "mv Delta.dat Delta.dat.NEW"; # rename the new one!

# Refine the mesh
chomp(my $delta = `getparam opt_delta param.loop`);
chomp(my $mindx = `getparam opt_mindx param.loop`);
chomp(my $ymin  = `getparam opt_ymin  param.loop`);
print "mesh optimization with delta=$delta mindx=$mindx ymin=$ymin\n";
system "optimize_mesh Delta.dat.NEW $delta $mindx $ymin >Delta.dat.NEW-opt 2>logNEW";
system "mesh_union Delta.dat.OLD Delta.dat.NEW-opt >mesh.dat 2>logUNION";
system "resample Delta.dat.OLD mesh.dat     Delta.dat.OLD-common";
system "resample Delta.dat.NEW-opt mesh.dat Delta.dat.NEW-common";

my $iter = `getiter`; # XXX
system "cp logNEW logNEW.$iter";
system "cp logUNION logUNION.$iter";

# Mixing
chomp(my $alpha = `getparam alpha param.loop`);
chomp(my $clip = `getparam clip param.loop`);
print "alpha=$alpha clip=$clip\n";
my $f1 = $alpha;
my $f2 = 1.0-$alpha;
system "mixy $f1 Delta.dat.NEW-common $f2 Delta.dat.OLD-common >Delta.dat.TEMP";

system "clipy b $clip Delta.dat.TEMP >Delta.dat";

msg("delete_NRG_output");
system "delete_NRG_output";

# RECURSION!
system "./checkconv";
if (!-e "CONVERGED" && !-e "STOP") {
  system "./DMFT";
}

sub msg
{
    my $msg = shift;
    print RED, "$msg\n", RESET;
}

sub error
{
    my $msg = shift;
    open(F, ">ERROR") or die "Can't create an ERROR flag file, stopped";
    print F "Error: $msg\n";
    close(F);
    die $msg;
}
